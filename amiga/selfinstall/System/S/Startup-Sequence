; Startup Sequence for HstWB Self Install
; ---------------------------------------
;
; Date: 2017-07-31
; Author: Henrik Noerfjand Stengaard


; Load patched scsi.device v43.45
LoadModule DEVS:scsi.device


; Clear screen
echo "*ec" 


; Welcome message
echo "HstWB Installer"
echo "---------------"
echo ""
echo "Welcome to HstWB Installer, an installer which automates"
echo "installation of Amiga OS 3.9, Workbench 3.1, Kickstart roms"
echo "and packages with additional content."
echo ""
echo "As Amiga OS 3.9, Workbench 3.1 and Kickstart roms are still"
echo "under license and sold commercially, these are not"
echo "included and must be provided during installation process."
echo ""
echo "Amiga OS 3.9 can be bought from either http://www.vesalia.de"
echo "or http://www.amigakit.com/."
echo ""
echo "Cloanto Amiga Forever Plus Edition contains both"
echo "Workbench 3.1 and Kickstart roms and can be bought from"
echo "https://www.amigaforever.com."
echo ""
ask "Press ENTER to continue"


; Clear screen
echo "*ec" 


; Workbench message
echo "Workbench 3.1 Disk"
echo "------------------"
echo ""
echo "Workbench system files are required for the"
echo "installation process and these will be loaded from"
echo "Workbench 3.1 disk."
echo ""
echo "Floppy device to use will now be autodetected by"
echo "checking if a disk is inserted in any floppy device."


; Print insert Workbench disk
LAB insertworkbenchdisk
echo ""
echo "Please insert Workbench 3.1 Workbench disk in any"
echo "floppy device."
echo ""
ask "Press ENTER to continue"
echo ""


; Using fail at 255 for DiskInDrive to fail properly
failat 255

; Check if disk is present in DF0:
DiskInDrive >NIL: DF0:
IF NOT WARN
  set floppydevice "DF0"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF1:
DiskInDrive >NIL: DF1:
IF NOT WARN
  set floppydevice "DF1"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF2:
DiskInDrive >NIL: DF2:
IF NOT WARN
  set floppydevice "DF2"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF3:, if not go back to insert workbench disk
DiskInDrive >NIL: DF3:
IF NOT WARN
  set floppydevice "DF3"
ELSE
  echo "No disk is inserted in any floppy device!"
  SKIP insertworkbenchdisk back
ENDIF


; Check Workbench 3.1 Workbench disk is present in DF0, if not go back to insert workbench disk
LAB checkworkbenchdisk
failat 21

IF NOT EXISTS $floppydevice:C/Which
  echo "Workbench disk is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:C/Assign
  echo "Workbench disk is not valid!"
  SKIP insertworkbenchdisk back
ELSE
  $floppydevice:C/Assign >NIL: T: RAM:
ENDIF
IF NOT "`$floppydevice:c/which $floppydevice:`" EQ "Workbench3.1:"
  echo "Workbench disk is not valid!"
  SKIP insertworkbenchdisk back
ENDIF 


; Delete mountlist used for checking floppy devices
IF EXISTS RAM:_mountlist
  delete >NIL: RAM:_mountlist
ENDIF


; Detected floppy device message
echo "Detected Workbench disk in floppy device $floppydevice:"
echo ""
ask "Press ENTER to continue"


; Set stack, failat and load basic commands resident 
stack 16384
failat 21
$floppydevice:C/AddBuffers >NIL: DF0: 200
resident $floppydevice:C/Assign PURE
resident $floppydevice:C/Copy PURE
resident $floppydevice:C/Delete PURE
resident $floppydevice:C/Execute PURE
resident $floppydevice:C/Rename PURE
resident $floppydevice:C/MakeDir PURE
resident $floppydevice:C/Protect PURE
resident $floppydevice:C/Search PURE 
resident $floppydevice:C/Wait PURE 
resident $floppydevice:C/Which PURE 
resident $floppydevice:C/Mount PURE
resident $floppydevice:C/Type PURE
resident $floppydevice:C/RequestChoice PURE
MakeDir RAM:Clipboards RAM:ENV RAM:ENV/Sys
Assign >NIL: ENV: RAM:Env
copy ENVARC:~(#?.info) ENV: ALL QUIET
Assign >NIL: T: RAM:
SetEnv TZ MST7


; Fail, if assign hstwb installer doesn't exist
IF NOT EXISTS S:Assign-HstWB-Installer
  echo "Error: assign hstwb installer doesn't exist!"
  SKIP fail
ENDIF
execute S:Assign-HstWB-Installer


; Fail, if HSTWBINSTALLERDIR: device name doesn't exist
Assign >NIL: EXISTS HSTWBINSTALLERDIR:
IF WARN
  echo "Error: HSTWBINSTALLERDIR: device name doesn't exist!"
  SKIP fail
ENDIF


; Create install prefs drawer, if it doesn't exist
IF NOT EXISTS INSTALL:Prefs
  makepath INSTALL:Prefs
ENDIF


; Run Patch Installation, if PATCHDIR: exists
execute "HSTWBINSTALLERDIR:Patch-Installation"


; Load system commands resident 
resident SYSTEMDIR:C/Reboot PURE 
resident SYSTEMDIR:C/UnZip PURE 
resident SYSTEMDIR:C/UAEquit PURE 
resident SYSTEMDIR:C/MakePath PURE 


; Create temp directory, if it doesn't exist
IF NOT EXISTS "SYSTEMDIR:Temp/FMS"
  makepath >NIL: "SYSTEMDIR:Temp/FMS"
ENDIF


; Mount and assign FMS
assign FMS: SYSTEMDIR:Temp/FMS
Mount FF0:


; Clear screen
echo "*ec" 


echo "Installation Description"
echo "------------------------"
echo ""
echo "Using UAE emulator following directories can be added for installation"
echo "of Amiga OS 3.9, Workbench 3.1 and Kickstart roms:"
echo "- Device name *e[1mCD0*e[22m, CD drive with Amiga OS 3.9 CD-Rom."
echo "- Device name *e[1mOS39*e[22m, directory with Amiga 3.9 iso and boing"
echo "  bag files."
echo "- Device name *e[1mWORKBENCHDIR*e[22m, directory with Workbench 3.1"
echo "  adf files."
echo "- Device name *e[1mKICKSTARTDIR*e[22m, directory with Kickstart rom"
echo "  files."
echo ""
ask "Press ENTER to continue"


; Clear screen
echo "*ec" 


echo "Installation Overview"
echo "---------------------"
echo ""
echo "Installation status:"

; Check if CD0: and AmigaOS3.9: device names exists and set installos39
set installos39 "0"
Assign >NIL: EXISTS CD0:
IF NOT WARN
  Assign >NIL: EXISTS AmigaOS3.9:
  IF NOT WARN
    set installos39 "1"
  ENDIF
ENDIF

; Print cd drive status depending on installos39
IF $installos39 EQ 1 VAL
  echo "- CD0: Present! Install Amiga OS 3.9 from CD drive."
ELSE
  echo "- CD0: Not present! Skip Amiga OS 3.9 installation"
  echo "  from CD drive."
ENDIF

; Check if OS39: device name and amiga os 3.9 iso exists and print message
set amigaos39isofile ""
Assign >NIL: EXISTS OS39:
IF NOT WARN
  ; Find boing bag files
  fsearch "OS39:" PAT BoingBag39#?.lha >T:_boingbagfiles

  IF $installos39 EQ 0 VAL
    ; Find amiga os 3.9 iso files
    echo "" NOLINE >T:_amigaos39isofiles
    fsearch "OS39:" PAT amigaos39.iso >>T:_amigaos39isofiles
    fsearch "OS39:" PAT amigaos3.9.iso >>T:_amigaos39isofiles

    ; Get first amiga os 3.9 iso file
    sed "1q;d" T:_amigaos39isofiles >T:_amigaos39isofile
    set amigaos39isofile "`type T:_amigaos39isofile`"
    IF NOT "$amigaos39isofile" EQ ""
      echo "- OS39: Present! Install Amiga OS 3.9 from iso and"
      echo "  apply Boing Bag updates, if available."
    ELSE
      echo "- OS39: Present! Apply Boing Bag updates, if available."
    ENDIF
  ELSE
    echo "- OS39: Present! Apply Boing Bag updates, if available."
  ENDIF
ELSE
  echo "- OS39: Not present! Skip Amiga OS 3.9 installation"
  echo "  from iso and Boing Bag updates."
ENDIF


; Skip Workbench 3.1 installation, if Amiga OS 3.9 will be installed
IF $installos39 EQ 1 VAL
  echo "- WORKBENCHDIR: Ignored! Skip Workbench 3.1 installation,"
ELSE
  ; Check if WORKBENCHDIR: device name exists and print message
  Assign >NIL: EXISTS WORKBENCHDIR:
  IF NOT WARN
    echo "- WORKBENCHDIR: Present! Install Workbench 3.1 from adf."
  ELSE
    echo "- WORKBENCHDIR: Not present! Skip Workbench 3.1 installation"
    echo "  from adf."
  ENDIF
ENDIF

; Check if KICKSTARTDIR: device name exists and print message
Assign >NIL: EXISTS KICKSTARTDIR:
IF NOT WARN
  echo "- KICKSTARTDIR: Present! Install Kickstart rom files."
ELSE
  echo "- KICKSTARTDIR: Not present! Skip Kickstart rom installation."
ENDIF

; Create backup of mountlist, if it doesn't exist. Otherwise overwrite mountlist with backup.
IF NOT EXISTS INSTALL:Devs/Mountlist.bak
  Copy >NIL: INSTALL:Devs/Mountlist INSTALL:Devs/Mountlist.bak
ELSE
  Copy >NIL: INSTALL:Devs/Mountlist.bak INSTALL:Devs/Mountlist
ENDIF


; Replace os39isofilename placeholder in mountlist and print amiga os 3.9 iso file, if present 
IF NOT "$amigaos39isofile" EQ ""
  echo ""
  echo "Using Amiga OS 3.9 iso file:"
  echo "$amigaos39isofile"
  rep INSTALL:Devs/Mountlist "OS39:[*$OS39IsoFileName]" "$amigaos39isofile"
ELSE
  rep INSTALL:Devs/Mountlist "OS39:[*$OS39IsoFileName]" ""
ENDIF


; Print boing bag files, if present
IF EXISTS T:_boingbagfiles
  set boingbagfilescount `wc -l <T:_boingbagfiles`
  IF $boingbagfilescount gt 0 VAL
    set installboingbags "1"
    echo ""
    echo "Using Boing Bag file(s):"
    type T:_boingbagfiles
  ENDIF
ENDIF


; Create install amiga os 3.9 prefs, if installos39 is 1
IF $installos39 EQ 1 VAL
  echo "" >INSTALL:Prefs/Install-AmigaOS3.9
ENDIF


; Create install boing bags prefs, if installboingbags is 1
IF $installboingbags EQ 1 VAL
  echo "" >INSTALL:Prefs/Install-BoingBags
ENDIF


echo ""
ask "Press ENTER to continue"
quit

; Clear screen
echo "*ec" 


; Run Install-Workbench-Adf, if WORKBENCHDIR: exists
Assign >NIL: EXISTS WORKBENCHDIR:
IF NOT WARN
  execute "HSTWBINSTALLERDIR:Install-Workbench-Adf"
ELSE
  execute "HSTWBINSTALLERDIR:Install-Workbench-Disk"
ENDIF


echo ""
echo "Workbench installation is complete."
echo ""
ask "Press ENTER to continue"


; Run Install-Kickstart-Rom, if KICKSTARTDIR: exists
Assign >NIL: EXISTS KICKSTARTDIR:
IF NOT WARN
  execute "HSTWBINSTALLERDIR:Install-Kickstart-Rom"
ENDIF


; Clear screen
echo "*ec" 


echo "Eject disk"
echo "----------"
echo ""
echo "A system reboot is required for installation process"
echo "to continue and floppy disk must be ejected."


; Check if disk is present in floppy device, if present go back to eject disk
LAB ejectdisk
DiskInDrive $floppydevice:
IF NOT WARN
  echo ""
  echo "Please eject disk from $floppydevice:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF


; Replace workbench startup-sequence with packages startup-sequence
Rename SYSTEMDIR:S/Startup-Sequence SYSTEMDIR:S/Startup-Sequence.Workbench 
Rename SYSTEMDIR:S/Startup-Sequence.Packages SYSTEMDIR:S/Startup-Sequence 


; Clear screen
echo "*ec" 


; Workbench installation complete
echo ""
echo "Workbench Installation Complete"
echo "-------------------------------"
echo ""
echo "HstWB Installer has completed installation of"
echo "Workbench, Kickstart roms and will now reboot to"
echo "start package installation."
echo ""
echo "Please wait 10 seconds before restarting to allow file"
echo "system to write changes to disk. Continue will reboot"
echo "the system in 10 seconds."
echo ""
ask "Press ENTER to continue"
echo ""
echo "Rebooting in 10 seconds..."
wait 10
reboot


; Fail
LAB fail
echo ""
echo "Installation failed."


; End
LAB end
