; Start Self Install
; ------------------
;
; Date: 2019-01-09
; Author: Henrik Noerfjand Stengaard


; set floppy device to none (used for eject disk)
set floppydevice ""

; fail, if exec.library is less than v40
Version >NIL: exec.library 40
IF WARN
  echo "*e[1mError: HstWB Installer requires minimum Kickstart 3.1 rom!*e[0m"
  SKIP fail
ENDIF


; welcome message
; ---------------
cls 
echo "*e[32m" NOLINE
echo "HstWB Installer"
echo "*e[0m*e[1m" NOLINE
echo "---------------"
echo "*e[0m" NOLINE
echo ""
echo "Welcome to HstWB Installer, an installer which automates"
echo "installation of Amiga OS 3.9, 3.1.4, 3.1, Kickstart roms"
echo "and packages with additional content."
echo ""
echo "As Amiga OS 3.9, 3.1.4, 3.1 and Kickstart roms are still"
echo "under license and sold commercially, these are not"
echo "included and must be provided during installation process."
echo ""
echo "Cloanto Amiga Forever Plus Edition contains both"
echo "Amiga OS 3.1 and Kickstart roms and can be bought from"
echo "https://www.amigaforever.com."
echo ""
echo "Amiga OS 3.9 can be bought from either http://www.vesalia.de"
echo "or http://www.amigakit.com/."
echo ""
ask "Press ENTER to continue"


; amiga os system files message
cls 
echo "*e[32m" NOLINE
echo "Amiga OS system files"
echo "*e[0m*e[1m" NOLINE
echo "---------------------"
echo "*e[0m" NOLINE
echo ""
echo "Amiga OS system files are required for the"
echo "installation process and will load these from"
echo "either Amiga OS 3.9, 3.1.4 or 3.1:"
echo "1. CD0: CD drive with Amiga OS 3.9 cd-rom."
echo "2. AMIGAOSDIR: Directory with Amiga OS 3.1.4 or 3.1"
echo "   Workbench adf file."
echo "3. DF0-DF3: Amiga OS 3.1.4 or 3.1 Workbench disk"
echo "   inserted in any floppy device."
echo ""
echo "Continue will start loading Amiga OS system files."
echo ""
ask "Press ENTER to continue"


; load amiga os
; -------------
LAB loadamigaos

; load amiga os system files message
cls 
echo "*e[32m" NOLINE
echo "Amiga OS system files"
echo "*e[0m*e[1m" NOLINE
echo "---------------------"
echo "*e[0m" NOLINE
echo ""
echo "*e[1mLoading Amiga OS system files:*e[0m"
echo "Amiga OS 3.9 cd-rom in CD0:..."

; set failat to 255 for diskindrive to fail silently
failat 255

; goto find amiga os adf, if CD0: device is not present
DiskInDrive >NIL: CD0:
IF NOT $RC EQ 0 VAL
  ; set failat to 21
  failat 21

  SKIP amigaosadf
ENDIF

; goto find amiga os adf, if AmigaOS3.9: device is not present
DiskInDrive >NIL: AmigaOS3.9:
IF NOT $RC EQ 0 VAL
  ; set failat to 21
  failat 21

  SKIP amigaosadf
ENDIF

; set failat to 21
failat 21

; goto find amiga os adf, if AmigaOS3.9:EMERGENCY-BOOT doesn't exist
IF NOT EXISTS "AmigaOS3.9:EMERGENCY-BOOT/C"
  SKIP amigaosadf
ENDIF

; load system files from amiga os 3.9 emergency boot
set systemfilesdir "AmigaOS3.9:EMERGENCY-BOOT/C"
SKIP loadsystemfiles


; amiga os adf
; ------------
LAB amigaosadf

echo "Amiga OS 3.1.4 or 3.1 Workbench adf file in AMIGAOSDIR:..."

; set failat to 255 for diskindrive to fail silently
failat 255

; goto amiga os disk, if AMIGAOSDIR: device is not present
DiskInDrive >NIL: AMIGAOSDIR:
IF NOT $RC EQ 0 VAL
  ; set failat to 21
  failat 21

  SKIP amigaosdisk
ENDIF

; set failat to 21
failat 21

; find adf files in AMIGAOSDIR:
FSearch >RAM:_adffiles "AMIGAOSDIR:" PAT="#?.adf"

; next adf file
LAB nextadffile

; get next adf file from first line of adf files
set adffile ""
set adffile `sed "1q;d" "RAM:_adffiles"` 

; delete first line from adf files
sed "1d" "RAM:_adffiles" >"RAM:_adffiles2"
Copy >NIL: "RAM:_adffiles2" "RAM:_adffiles" 

; goto amiga os disk, if no valid amiga os 3.1.4 or 3.1 workbench adf was detected
IF "$adffile" EQ ""
  SKIP amigaosdisk
ENDIF

; goto next adf file, if file size is not 901120 bytes
set filesize `wc -c <"$adffile"`
IF NOT $filesize EQ 901120 VAL
  SKIP BACK nextadffile
ENDIF

; find amiga os 3.1.4 workbench disk volume name in adf file
FSearch >RAM:_amigaos314volume "$adffile" TXT="Workbench3.1.4"
set amigaos314volume `wc -l <RAM:_amigaos314volume`
IF $amigaos314volume GT 0 VAL
  SKIP adflist
ENDIF

; find amiga os 3.1 workbench disk volume name in adf file
FSearch >RAM:_amigaos310volume "$adffile" TXT="Workbench3.1"
set amigaos310volume `wc -l <RAM:_amigaos310volume`
IF $amigaos310volume GT 0 VAL
  SKIP adflist
ENDIF

; goto next adf file, workbench volume name
SKIP BACK nextadffile

; adf list
LAB adflist

; goto next adf file, if xadunfile doesn't return error code 0
xadUnFile >RAM:_adflist "$adffile" DIMG LIST
IF NOT $RC EQ 0
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain which file
grep >NIL: -i "C/Which" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain assign file
grep >NIL: -i "C/Assign" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain datatypes.library file
grep >NIL: -i "Libs/datatypes.library" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain cli file
grep >NIL: -i "System/CLI" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain shell.info file
grep >NIL: -i "System/Shell.info" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF 

; extract amiga os adf
; --------------------

; adf file
echo "$adffile"

; create temp amiga os workbench directory, if it doesn't exist
IF NOT EXISTS "HSTWBINSTALLERDIR:Temp/Amiga-OS-Workbench"
  MakePath >NIL: "HSTWBINSTALLERDIR:Temp/Workbench"
ENDIF

; Extract files from amiga os workbench adf
xadUnFile >NIL: "$adffile" "HSTWBINSTALLERDIR:Temp/Amiga-OS-Workbench" DIMG OVERWRITE

; goto load system files
set systemfilesdir "HSTWBINSTALLERDIR:Temp/Amiga-OS-Workbench/C"
SKIP loadsystemfiles 


; amiga os disk
; -------------
LAB amigaosdisk

echo "*e[1mNo Amiga OS system files detected!*e[0m"
Wait SECS=2

; restart load amiga os system files
LAB restartamigaos
set restart `RequestChoice "Amiga OS system files" "Amiga OS system files could not be loaded from*NAmiga OS 3.9 cd-rom in CD0: device, Amiga OS 3.1.4*Nor 3.1 Workbench adf file in AMIGAOSDIR: device.*N*NDo you want to restart load Amiga OS system files?" "Help|Yes|No"`
IF "$restart" EQ 1 VAL
  Lister "INSTALLDIR:Help/Amiga-OS-System-Files.txt" >NIL:
  SKIP BACK restartamigaos
ENDIF
IF "$restart" EQ 2 VAL
  SKIP BACK loadamigaos
ENDIF


; load amiga os system files from floppy device
cls 
echo "*e[32m" NOLINE
echo "Amiga OS system files"
echo "*e[0m*e[1m" NOLINE
echo "---------------------"
echo "*e[0m" NOLINE
echo ""
echo "Amiga OS system files will now be loaded from floppy device."

; insert workbench disk
LAB insertworkbenchdisk
echo ""
echo "Please insert Amiga OS 3.1.4 or 3.1 Workbench disk in any"
echo "floppy device."
echo ""
ask "Press ENTER to continue"
echo ""

; set failat 255 for diskindrive to fail silently
failat 255

; goto check verify workbench disk, if disk is present in DF0: device
DiskInDrive >NIL: DF0:
IF NOT WARN
  set floppydevice "DF0"
  SKIP verifyworkbenchdisk
ENDIF

; goto check verify workbench disk, if disk is present in DF1: device
DiskInDrive >NIL: DF1:
IF NOT WARN
  set floppydevice "DF1"
  SKIP verifyworkbenchdisk
ENDIF

; goto check verify workbench disk, if disk is present in DF2: device
DiskInDrive >NIL: DF2:
IF NOT WARN
  set floppydevice "DF2"
  SKIP verifyworkbenchdisk
ENDIF

; verify workbench disk, if disk is present in DF3: device, if not go back to insert workbench disk
DiskInDrive >NIL: DF3:
IF NOT WARN
  set floppydevice "DF3"
ELSE
  echo "No disk is inserted in any floppy device!"
  SKIP insertworkbenchdisk back
ENDIF

; verify workbench disk
LAB verifyworkbenchdisk
failat 21

IF NOT EXISTS $floppydevice:C/Which
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:C/Assign
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:Libs/datatypes.library
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/CLI
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/Shell.info
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT "`$floppydevice:c/which $floppydevice:`" EQ "Workbench3.1:"
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF 

echo "Loading Amiga OS system files from Workbench disk in"
echo "floppy device $floppydevice:..."
set systemfilesdir "$floppydevice:c"


; load system files
; -----------------
LAB loadsystemfiles

; load amiga os system files resident
resident "$systemfilesdir/Assign" PURE
resident "$systemfilesdir/Copy" PURE
resident "$systemfilesdir/Delete" PURE
resident "$systemfilesdir/DiskChange" PURE
resident "$systemfilesdir/Eval" PURE
resident "$systemfilesdir/Execute" PURE
resident "$systemfilesdir/List" PURE
resident "$systemfilesdir/Rename" PURE
resident "$systemfilesdir/MakeDir" PURE
resident "$systemfilesdir/Protect" PURE
resident "$systemfilesdir/Search" PURE 
resident "$systemfilesdir/Wait" PURE 
resident "$systemfilesdir/Which" PURE 
resident "$systemfilesdir/Mount" PURE
resident "$systemfilesdir/Type" PURE
resident "$systemfilesdir/RequestChoice" PURE
resident "$systemfilesdir/Version" PURE

MakeDir RAM:Clipboards RAM:ENV/Sys
SetEnv TZ MST7

echo "Done"
echo ""
ask "Press ENTER to continue"

; fail, if assign hstwb installer doesn't exist
IF NOT EXISTS S:Assign-HstWB-Installer
  echo "*e[1mError: Assign hstwb installer doesn't exist!*e[0m"
  SKIP fail
ENDIF
execute S:Assign-HstWB-Installer


; fail, if HSTWBINSTALLERDIR: device doesn't exist
Assign >NIL: EXISTS HSTWBINSTALLERDIR:
IF WARN
  echo "*e[1mError: Self install HSTWBINSTALLERDIR: device doesn't exist!*e[0m"
  SKIP fail
ENDIF

; fail, if INSTALLDIR: device doesn't exist
Assign >NIL: EXISTS INSTALLDIR:
IF WARN
  echo "*e[1mError: Self install INSTALLDIR: device doesn't exist!*e[0m"
  SKIP fail
ENDIF

; load commands resident 
Resident >NIL: "INSTALLDIR:C/MakePath" PURE 
Resident >NIL: "INSTALLDIR:C/Reboot" PURE 
Resident >NIL: "INSTALLDIR:C/TotalReset" PURE
Resident >NIL: "INSTALLDIR:C/UAEquit" PURE
Resident >NIL: "INSTALLDIR:C/LhA" PURE
Resident >NIL: "INSTALLDIR:C/UNLZX" PURE
Resident >NIL: "INSTALLDIR:C/UnZip" PURE


; create hstwbinstalldir temp directory, if it doesn't exist. otherwise delete all files from hstwbinstalldir temp directory
IF NOT EXISTS "HSTWBINSTALLERDIR:Temp/"
  MakePath >NIL: "HSTWBINSTALLERDIR:Temp"
ELSE
  Delete >NIL: "HSTWBINSTALLERDIR:Temp/#?" ALL
ENDIF

; create installdir temp directory, if it doesn't exist. otherwise delete all files from installdir temp directory
IF NOT EXISTS "INSTALLDIR:Temp/"
  MakePath >NIL: "INSTALLDIR:Temp"
ELSE
  Delete >NIL: "INSTALLDIR:Temp/#?" ALL
ENDIF

; create install prefs directory, if it doesn't exist. otherwise delete all files from install prefs directory
IF NOT EXISTS "INSTALLDIR:Prefs/"
  MakePath >NIL: "INSTALLDIR:Prefs/Default"
ELSE
  Delete >NIL: "INSTALLDIR:Prefs/~(Default)#?" ALL
ENDIF

; copy default prefs to prefs directory
Copy "INSTALLDIR:Prefs/Default/#?" "INSTALLDIR:Prefs" ALL

; run prepare self install
execute "INSTALLDIR:S/Prepare-SelfInstall"

; run remove self install
execute "INSTALLDIR:S/Remove-SelfInstall"

; run install start
execute "INSTALLDIR:S/Install-Start"

; goto self install complete, if floppy device is empty
IF "$floppydevice" EQ ""
  SKIP selfinstallcomplete
ENDIF


; print eject disk message
cls
echo "*e[32m" NOLINE
echo "Eject disk"
echo "*e[0m*e[1m" NOLINE
echo "----------"
echo "*e[22m" NOLINE
echo ""
echo "A system reboot is required for installation process"
echo "to continue and any floppy disk must be ejected."

; eject disk
LAB ejectdisk

; check if disk is present in floppy device DF0:, if present go back to eject disk
DiskInDrive DF0:
IF $RC EQ 0 VAL
  echo ""
  echo "Please eject disk from DF0:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF

; check if disk is present in floppy device DF1:, if present go back to eject disk
DiskInDrive DF1:
IF $RC EQ 0 VAL
  echo ""
  echo "Please eject disk from DF1:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF

; check if disk is present in floppy device DF2:, if present go back to eject disk
DiskInDrive DF2:
IF $RC EQ 0 VAL
  echo ""
  echo "Please eject disk from DF2:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF

; check if disk is present in floppy device DF3:, if present go back to eject disk
DiskInDrive DF3:
IF $RC EQ 0 VAL
  echo ""
  echo "Please eject disk from DF3:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF


; self install complete
; ---------------------
LAB selfinstallcomplete

; run Install-Complete
execute "INSTALLDIR:S/Install-Complete"

SKIP end


; fail
LAB fail
echo ""
echo "Installation failed."
quit


; end
LAB end
