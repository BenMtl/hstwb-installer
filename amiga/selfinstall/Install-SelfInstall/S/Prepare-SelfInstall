; Prepare Self Install
; --------------------
;
; Date: 2019-01-03
; Author: Henrik Noerfjand Stengaard
;
; AmigaDOS script to prepare self install by detecting precense of CD drive,
; Amiga OS 3.9 iso and Boing Bags to configure installation flow.


; self install overview
cls 
echo "*e[32m" NOLINE
echo "Self install overview"
echo "*e[0m*e[1m" NOLINE
echo "---------------------"
echo "*e[0m" NOLINE
echo ""
echo "Using UAE emulator HstWB-Installer can detect and use"
echo "following device names for installation of Amiga OS 3.9,"
echo "3.1.4, 3.1, Kickstart roms and user packages:"
echo "- *e[1mCD0*e[0m: CD drive with Amiga OS 3.9 cd-rom."
echo "- *e[1mAMIGAOSDIR*e[0m: Directory with Amiga 3.1.4 or 3.1 adf files,"
echo "  Amiga OS 3.9 iso and Boing Bag lha files."
echo "  *e[1mNote: Directory must be read/write, if installing Amiga"
echo "  OS 3.9 from iso (required by filedisk.device).*e[0m"
echo "- *e[1mKICKSTARTDIR*e[0m: Directory with Kickstart rom files."
echo "- *e[1mUSERPACKAGESDIR*e[0m: Directory with user packages."
echo ""
echo "Continue will detect Amiga OS."
echo ""
ask "Press ENTER to continue"

; detect amiga os
cls 
echo "*e[32m" NOLINE
echo "Detect Amiga OS"
echo "*e[0m*e[1m" NOLINE
echo "---------------"
echo "*e[0m" NOLINE
echo ""
echo "*e[1mDetecting Amiga OS:*e[0m"

; ask for md5 only or md5 and mount adf 
set md5only `RequestChoice "Amiga OS adf detection" "Do you want use MD5 only or MD5 and mount adf*Nto detect Amiga OS adf files?*N*N'MD5 only' makes detection faster, but will only*Ndetect valid Amiga OS adf files using MD5 checksum.*N*N'MD5 and mount adf' makes detection slower, but will*Nuse both MD5 checksum and mount adf for a more broad*Ndetection of valid Amiga OS adf files.*N*NIf you're not sure what to choose, *Nselect 'MD5 and mount adf' for best detection." "MD5 only|MD5 and mount adf"`
IF "$md5only" EQ 1 VAL
  echo "" NOLINE >INSTALLDIR:Prefs/MD5-Only
ENDIF

; set failat to 255 for DiskInDrive to fail silently
failat 255

; set amigaosdir to 1, if "AMIGAOSDIR:" device exists
set amigaosdir "0"
DiskInDrive >NIL: AMIGAOSDIR:
IF $RC EQ 0 VAL
  set amigaosdir "1"
ELSE
  echo "*e[1mAMIGAOSDIR*e[0m: Not present! Skip detecting"
  echo "Amiga OS 3.9 iso, Amiga 3.1.4 or 3.1 adf files and"
  echo "Boing Bag lha files."
ENDIF

; set failat to 21
failat 21

; run detect amiga os 3.9, if it exists
IF EXISTS "INSTALLDIR:S/Amiga-OS-3.9/Detect-Amiga-OS-3.9"
  execute "INSTALLDIR:S/Amiga-OS-3.9/Detect-Amiga-OS-3.9"
ENDIF

; run detect amiga os 3.1.4 and 3.1 adf, if AMIGAOSDIR: device name exists
IF $amigaosdir EQ 1 VAL
  ; run detect amiga os 3.1.4 adf, if it exists
  IF EXISTS "INSTALLDIR:S/Amiga-OS-3.1.4/Detect-Amiga-OS-3.1.4-Adf"
    execute "INSTALLDIR:S/Amiga-OS-3.1.4/Detect-Amiga-OS-3.1.4-Adf"
  ENDIF

  ; run detect amiga os 3.1 adf, if it exists
  IF EXISTS "INSTALLDIR:S/Amiga-OS-3.1/Detect-Amiga-OS-3.1-Adf"
    execute "INSTALLDIR:S/Amiga-OS-3.1/Detect-Amiga-OS-3.1-Adf"
  ENDIF
ENDIF

echo "Done"
echo ""
echo "Continue will show 'Amiga OS Installation' menu."
echo ""
ask "Press ENTER to continue"

; create detect amiga os log
echo "" NOLINE >INSTALLDIR:Temp/Detect-Amiga-OS.log
IF EXISTS INSTALLDIR:Temp/Amiga-OS-390.log
  type INSTALLDIR:Temp/Amiga-OS-390.log >>INSTALLDIR:Temp/Detect-Amiga-OS.log
  echo "" >>INSTALLDIR:Temp/Detect-Amiga-OS.log
ENDIF
IF EXISTS INSTALLDIR:Temp/Amiga-OS-314-Adf.log
  type INSTALLDIR:Temp/Amiga-OS-314-Adf.log >>INSTALLDIR:Temp/Detect-Amiga-OS.log
  echo "" >>INSTALLDIR:Temp/Detect-Amiga-OS.log
ENDIF
IF EXISTS INSTALLDIR:Temp/Amiga-OS-310-Adf.log
  type INSTALLDIR:Temp/Amiga-OS-310-Adf.log >>INSTALLDIR:Temp/Detect-Amiga-OS.log
  echo "" >>INSTALLDIR:Temp/Detect-Amiga-OS.log
ENDIF

; build amiga os menu
execute INSTALLDIR:S/Build-Amiga-OS-Menu INSTALLDIR:Temp/Amiga-OS-Menu

; run amiga os menu
execute INSTALLDIR:Temp/Amiga-OS-Menu


; detect kickstart
cls 
echo "*e[32m" NOLINE
echo "Detect Kickstart roms"
echo "*e[0m*e[1m" NOLINE
echo "---------------------"
echo "*e[0m" NOLINE
echo ""
echo "*e[1mDetecting Kickstart roms:*e[0m"

; set failat 255 for diskindrive to fail silently
failat 255

; set kickstartdir to 1, if "KICKSTARTDIR:" device exists
set kickstartdir "0"
DiskInDrive >NIL: KICKSTARTDIR:
IF $RC EQ 0 VAL
  set kickstartdir "1"
ELSE
  ;echo "Warning: KICKSTARTDIR: device doesn't exist or is not mapped to a directory!" >>INSTALLDIR:Temp/Kickstart-Rom.log

  echo "*e[KICKSTARTDIR*e[0m: Not present! Skip detecting"
  echo "Kickstart rom files."
ENDIF

; set failat to 21
failat 21

; run detect kickstart rom, if KICKSTARTDIR: device exists
IF "$kickstartdir" EQ 1 VAL
  ; run detect kickstart, if it exists
  IF EXISTS "INSTALLDIR:S/Kickstart/Detect-Kickstart-Rom"
    execute "INSTALLDIR:S/Kickstart/Detect-Kickstart-Rom"
  ENDIF
ENDIF

echo "Done"
echo ""
echo "Continue will show Select Kickstart installation menu."
echo ""
ask "Press ENTER to continue"

; create detect kickstart log
IF EXISTS "INSTALLDIR:Temp/Kickstart-Rom.log"
  Copy >NIL: "INSTALLDIR:Temp/Kickstart-Rom.log" "INSTALLDIR:Temp/Detect-Kickstart.log"
ENDIF

; build kickstart menu
execute INSTALLDIR:S/Build-Kickstart-Menu INSTALLDIR:Temp/Kickstart-Menu

; run kickstart menu
execute INSTALLDIR:Temp/Kickstart-Menu


; detect user packages
; --------------------
LAB detectuserpackages

echo "" NOLINE >"INSTALLDIR:Temp/Detect-User-Packages.log"
echo "Detect user packages" >>"INSTALLDIR:Temp/Detect-User-Packages.log"
echo "--------------------" >>"INSTALLDIR:Temp/Detect-User-Packages.log"

cls 
echo "*e[32m" NOLINE
echo "Detect user packages"
echo "*e[0m*e[1m" NOLINE
echo "--------------------"
echo "*e[0m" NOLINE
echo ""
echo "*e[1mDetecting user packages in USERPACKAGESDIR:*e[0m"

; run detect user packages
set dummy "`execute INSTALLDIR:S/Detect-User-Packages`"

; list detected user packages
type INSTALLDIR:Prefs/User-Packages

echo "Done"
echo ""
echo "Continue will show 'Detected User Packages' menu."
echo ""
ask "Press ENTER to continue"

; build detect user packages menu
LAB userpackagesmenu

set userpackagescount `wc -l <INSTALLDIR:Prefs/User-Packages`
IF "$userpackagescount" GT 0 VAL
  Copy >NIL: "INSTALLDIR:Prefs/User-Packages" "T:_user-packages-menu"
ELSE
  echo "No user packages detected!" >"T:_user-packages-menu"
ENDIF

echo "--------------------------------------------------" >>"T:_user-packages-menu"
echo "Help" >>"T:_user-packages-menu"
echo "Show detect user packages log" >>"T:_user-packages-menu"
echo "Restart detect user packages" >>"T:_user-packages-menu"
echo "Continue with $userpackagescount user package(s)" >>"T:_user-packages-menu"

; show user packages menu
set userpackagesoption ""
set userpackagesoption "`RequestList TITLE="Detected User Packages" LISTFILE="T:_user-packages-menu" WIDTH=640 LINES=24`"
Delete >NIL: "T:_user-packages-menu"

; set initial menu option
IF "$userpackagescount" GT 0 VAL
  set menuoption "$userpackagescount"
ELSE
  set menuoption "1"
ENDIF

; help option
set menuoption `eval $menuoption + 2`
IF "$userpackagesoption" EQ $menuoption VAL
  Lister "INSTALLDIR:Help/Detected-User-Packages.txt" >NIL:
ENDIF

; show detect user packages log option
set menuoption `eval $menuoption + 1`
IF "$userpackagesoption" EQ $menuoption VAL
  IF EXISTS "INSTALLDIR:Temp/Detect-User-Packages.log"
    Lister "INSTALLDIR:Temp/Detect-User-Packages.log" >NIL:
  ELSE
    RequestChoice "Error" "Detect User Packages log doesn't exist!" "OK" >NIL:
  ENDIF
ENDIF

; restart detect user packages option
set menuoption `eval $menuoption + 1`
IF "$userpackagesoption" EQ $menuoption VAL
  set confirm "`RequestChoice "Detected User Packages" "Do you want to restart detect user packages?" "Yes|No"`"
  IF "$confirm" EQ 1 VAL
    SKIP BACK detectuserpackages
  ENDIF
ENDIF

; confirm user packages and continue option
set menuoption `eval $menuoption + 1`
IF "$userpackagesoption" EQ $menuoption VAL
  set confirm "`RequestChoice "Detected User Packages" "Do you want to continue with $userpackagescount user packages?" "Yes|No"`"
  IF "$confirm" EQ 1 VAL
    ; add detect user packages to log
    type "INSTALLDIR:Temp/Detect-User-Packages.log" >>SYS:hstwb-installer.log

    SKIP selfinstallready
  ENDIF
ENDIF

SKIP BACK userpackagesmenu


; Self install ready
; ------------------
LAB selfinstallready
cls 
echo "*e[32m" NOLINE
echo "Self Install Ready"
echo "*e[0m*e[1m" NOLINE
echo "------------------"
echo "*e[0m" NOLINE
echo ""
echo "Self install is ready to start installation process."
echo ""
echo "This is last chance to adjust device names, files used"
echo "during installation before starting self install."
echo ""
echo "Adjust device names, directories and files now and reset"
echo "to detect changes."
echo ""
echo "When self install has started, it's no longer possible to"
echo "reset installation process."
echo ""
echo "Continue will start self install."
echo ""
ask "Press ENTER to continue"
