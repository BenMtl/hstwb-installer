; Startup Sequence for HstWB Self Install
; ---------------------------------------
;
; Date: 2017-09-05
; Author: Henrik Noerfjand Stengaard


; Load patched scsi.device v43.45
LoadModule DEVS:scsi.device


; Add alias
Alias cls "Echo NOLINE *"*E[0;0H*E[J*" " 


; Welcome message
cls 
echo "HstWB Installer"
echo "---------------"
echo ""
echo "Welcome to HstWB Installer, an installer which automates"
echo "installation of Amiga OS 3.9, Workbench 3.1, Kickstart roms"
echo "and packages with additional content."
echo ""
echo "As Amiga OS 3.9, Workbench 3.1 and Kickstart roms are still"
echo "under license and sold commercially, these are not"
echo "included and must be provided during installation process."
echo ""
echo "Amiga OS 3.9 can be bought from either http://www.vesalia.de"
echo "or http://www.amigakit.com/."
echo ""
echo "Cloanto Amiga Forever Plus Edition contains both"
echo "Workbench 3.1 and Kickstart roms and can be bought from"
echo "https://www.amigaforever.com."
echo ""
ask "Press ENTER to continue"


; Workbench message
cls 
echo "Workbench 3.1"
echo "-------------"
echo ""
echo "Workbench 3.1 system files are required for the"
echo "installation process and these will be loaded from"
echo "Workbench 3.1 disk."
echo ""
echo "Workbench 3.1 disk adf file will now be autodetected and"
echo "used from WORKBENCHDIR:, if it's present."
echo ""
echo "If WORKBENCHDIR: is not present, it will fallback to"
echo "use floppy devices and autodetect first floppy device"
echo "with Workbench 3.1 disk inserted."
echo ""
ask "Press ENTER to continue"


; Set stack
stack 16384


; Set floppydevice empty
Set floppydevice ""


; Set failat to 255 for DiskInDrive to fail silently
failat 255


; Goto detect workbench disk, if WORKBENCHDIR: is not mapped
DiskInDrive >NIL: WORKBENCHDIR:
IF WARN
  ; Set failat to 21
  failat 21
  SKIP detectworkbenchdisk
ENDIF


; Set failat to 21
failat 21


; Autodetect workbench 3.1 adf message
cls 
echo "Autodetect Workbench 3.1 adf"
echo "----------------------------"
echo ""
echo "Finding Workbench 3.1 adf in WORKBENCHDIR:..."

; Add assigns from S:AssignList
AssPlus >NIL:

; Find adf files in WORKBENCHDIR:
FSearch >RAM:_adffiles "WORKBENCHDIR:" PAT="#?.adf"

; Get next adf file
LAB nextadffile
set adffile ""
set adffile `FirstLine RAM:_adffiles DELETE`

; Goto workbench disk fallback, if no valid workbench adf was detected
IF "$adffile" EQ ""
  SKIP workbenckdiskfallback
ENDIF

; Goto next adf file, if file size is not 901120 bytes
set filesize `wc -c <"$adffile"`
IF NOT $filesize EQ 901120 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf files doesn't contain text "Workbench 3.1"
FSearch >RAM:_workbenchadffiles "$adffile" TXT="Workbench3.1"
set workbenchadffiles `wc -l <RAM:_workbenchadffiles`
IF $workbenchadffiles EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if xadunfile doesn't return error code 0
xadUnFile >RAM:_adflist "$adffile" DIMG LIST
IF NOT $RC EQ 0
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain which file
grep >NIL: -i "C/Which" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain assign file
grep >NIL: -i "C/Assign" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain datatypes.library file
grep >NIL: -i "Libs/datatypes.library" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain cli file
grep >NIL: -i "System/CLI" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain shell.info file
grep >NIL: -i "System/Shell.info" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Workbench 3.1 adf detected, goto extract workbench adf
SKIP extractworkbenchadf


; Workbench disk fallback
; -----------------------
LAB workbenckdiskfallback

; Print workbench disk floppy device fallback message
echo "Done"
echo ""
echo "Workbench 3.1 adf doesn't exist in WORKBENCHDIR:."
echo ""
echo "Workbench adf files in WORKBENCHDIR: can be changed"
echo "and a reset will restart autodetect Workbench 3.1"
echo "adf files in WORKBENCHDIR:."
echo ""
echo "Otherwise installation will continue and fallback to"
echo "autodetect Workbench 3.1 disk in any floppy device."
echo ""
ask "Press ENTER to continue"
SKIP detectworkbenchdisk


; Extract workbench adf
; ---------------------
LAB extractworkbenchadf

echo "Done"
echo ""
echo "Detected Workbench 3.1 adf file:"
echo "$adffile"
echo ""
echo "Workbench adf files in WORKBENCHDIR: can be changed"
echo "and a reset will restart autodetect Workbench 3.1"
echo "adf files in WORKBENCHDIR:, if the detected"
echo "Workbench 3.1 adf file isn't correct."
echo ""
echo "Otherwise installation will continue extracting"
echo "Workbench 3.1 system files from adf file"
echo "to a temp directory and use them for self install."
echo ""
ask "Press ENTER to continue"
echo ""
echo "Preparing Workbench system files..."


; Create temp workbench directory, if it doesn't exist
IF NOT EXISTS "SYS:Temp/Workbench"
  MakePath >NIL: "SYS:Temp/Workbench"
ENDIF


; Extract files from workbench 3.1 adf
xadUnFile >NIL: "$adffile" "SYS:Temp/Workbench" DIMG OVERWRITE


; Add buffers, load commands resident and setup shell
SYS:Temp/Workbench/C/AddBuffers >NIL: DF0: 200
resident SYS:Temp/Workbench/C/Assign PURE
resident SYS:Temp/Workbench/C/Copy PURE
resident SYS:Temp/Workbench/C/Delete PURE
resident SYS:Temp/Workbench/C/Execute PURE
resident SYS:Temp/Workbench/C/Rename PURE
resident SYS:Temp/Workbench/C/MakeDir PURE
resident SYS:Temp/Workbench/C/Protect PURE
resident SYS:Temp/Workbench/C/Search PURE 
resident SYS:Temp/Workbench/C/Wait PURE 
resident SYS:Temp/Workbench/C/Which PURE 
resident SYS:Temp/Workbench/C/Mount PURE
resident SYS:Temp/Workbench/C/Type PURE
resident SYS:Temp/Workbench/C/RequestChoice PURE
MakeDir RAM:Clipboards RAM:ENV RAM:ENV/Sys
Copy ENVARC:~(#?.info) ENV: ALL QUIET
SetEnv TZ MST7


; Print prepare workbench system files done message
echo "Done"
echo ""
ask "Press ENTER to continue"
SKIP selfinstallstart


; Detect workbench disk
; ----------------------
LAB detectworkbenchdisk

; Print autodetect workbench 3.1 disk message
cls 
echo "Autodetect Workbench 3.1 disk"
echo "-----------------------------"

LAB insertworkbenchdisk
echo ""
echo "Please insert Workbench 3.1 Workbench disk in any"
echo "floppy device."
echo ""
ask "Press ENTER to continue"
echo ""


; Using fail at 255 for DiskInDrive to fail silently
failat 255

; Check if disk is present in DF0:
DiskInDrive >NIL: DF0:
IF NOT WARN
  set floppydevice "DF0"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF1:
DiskInDrive >NIL: DF1:
IF NOT WARN
  set floppydevice "DF1"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF2:
DiskInDrive >NIL: DF2:
IF NOT WARN
  set floppydevice "DF2"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF3:, if not go back to insert workbench disk
DiskInDrive >NIL: DF3:
IF NOT WARN
  set floppydevice "DF3"
ELSE
  echo "No disk is inserted in any floppy device!"
  SKIP insertworkbenchdisk back
ENDIF


; Check Workbench 3.1 Workbench disk is present in DF0, if not go back to insert workbench disk
LAB checkworkbenchdisk
failat 21

IF NOT EXISTS $floppydevice:C/Which
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:C/Assign
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:Libs/datatypes.library
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/CLI
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/Shell.info
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT "`$floppydevice:c/which $floppydevice:`" EQ "Workbench3.1:"
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF 


; Detected floppy device message
echo "Detected Workbench 3.1 disk in floppy device $floppydevice:"
echo ""
ask "Press ENTER to continue"


; Set stack, failat and load basic commands resident 
stack 16384
failat 21
$floppydevice:C/AddBuffers >NIL: DF0: 200
resident $floppydevice:C/Assign PURE
resident $floppydevice:C/Copy PURE
resident $floppydevice:C/Delete PURE
resident $floppydevice:C/Execute PURE
resident $floppydevice:C/Rename PURE
resident $floppydevice:C/MakeDir PURE
resident $floppydevice:C/Protect PURE
resident $floppydevice:C/Search PURE 
resident $floppydevice:C/Wait PURE 
resident $floppydevice:C/Which PURE 
resident $floppydevice:C/Mount PURE
resident $floppydevice:C/Type PURE
resident $floppydevice:C/RequestChoice PURE
MakeDir RAM:Clipboards RAM:ENV RAM:ENV/Sys
Copy ENVARC:~(#?.info) ENV: ALL QUIET
SetEnv TZ MST7


; Self install start
; ------------------
LAB selfinstallstart


; Fail, if assign hstwb installer doesn't exist
IF NOT EXISTS S:Assign-HstWB-Installer
  echo "Error: Assign hstwb installer doesn't exist!"
  SKIP fail
ENDIF
execute S:Assign-HstWB-Installer


; Add assigns to installdir
Assign >NIL: C: INSTALLDIR:C ADD
Assign >NIL: Devs: INSTALLDIR:Devs ADD
Assign >NIL: L: INSTALLDIR:L ADD
Assign >NIL: Libs: INSTALLDIR:Libs ADD
Assign >NIL: Prefs: INSTALLDIR:Prefs ADD


; Fail, if HSTWBINSTALLERDIR: device name doesn't exist
Assign >NIL: EXISTS HSTWBINSTALLERDIR:
IF WARN
  echo "Error: HSTWBINSTALLERDIR: device name doesn't exist!"
  SKIP fail
ENDIF


; Load commands resident 
resident INSTALLDIR:C/MakePath PURE 
resident INSTALLDIR:C/Reboot PURE 
resident INSTALLDIR:C/TotalReset PURE
resident INSTALLDIR:C/UAEquit PURE
resident INSTALLDIR:C/UnZip PURE 


; Create install prefs drawer, if it doesn't exist
IF NOT EXISTS INSTALLDIR:Prefs
  makepath INSTALLDIR:Prefs
ENDIF


; Run patch installation
execute "INSTALLDIR:S/Patch-Installation"


; Run prepare self install
execute "INSTALLDIR:S/Prepare-SelfInstall"


; Run remove self install
execute "INSTALLDIR:S/Remove-SelfInstall"


; Run install start
execute "INSTALLDIR:S/Install-Start"


; Goto self install complete, if floppy device is empty
IF "$floppydevice" EQ ""
  SKIP selfinstallcomplete
ENDIF


; Print eject disk message
cls
echo "Eject disk"
echo "----------"
echo ""
echo "A system reboot is required for installation process"
echo "to continue and floppy disk must be ejected."


; Check if disk is present in floppy device, if present go back to eject disk
LAB ejectdisk
DiskInDrive $floppydevice:
IF NOT WARN
  echo ""
  echo "Please eject disk from $floppydevice:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF


; Complete
; --------
LAB selfinstallcomplete

; Remove assigns from installdir
Assign >NIL: C: INSTALLDIR:C REMOVE
Assign >NIL: Devs: INSTALLDIR:Devs REMOVE
Assign >NIL: L: INSTALLDIR:L REMOVE
Assign >NIL: Libs: INSTALLDIR:Libs REMOVE
Assign >NIL: Prefs: INSTALLDIR:Prefs REMOVE


; Run Install-Complete
execute "INSTALLDIR:S/Install-Complete"

SKIP end


; Fail
LAB fail
echo ""
echo "Installation failed."
quit


; End
LAB end