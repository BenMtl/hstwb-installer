; Startup Sequence for HstWB Self Install
; ---------------------------------------
;
; Date: 2018-11-09
; Author: Henrik Noerfjand Stengaard


FailAt 21

; Load patched scsi.device v43.45, if it exists
IF EXISTS DEVS:scsi.device
  ; Load scsi.device, if current loaded scsi.device is less than v43.45
  Version >NIL: "scsi.device" 43 45
  IF WARN
    LoadModule DEVS:scsi.device
  ENDIF
ENDIF


; Add alias
Alias cls "Echo NOLINE *"*E[0;0H*E[J*" " 

; Set stack
stack 16384

; Add assigns from S:AssignList
AssPlus >NIL:


; Fail, if exec.library is less than v40
Version >NIL: exec.library 40
IF WARN
  echo "*e[1mError: HstWB Installer requires minimum Kickstart 3.1 rom.*e[0m"
  quit
ENDIF


; Welcome message
cls 
echo "*e[32m" NOLINE
echo "HstWB Installer v[$VersionText]"
echo "*e[0m*e[1m" NOLINE
echo "-----------------[$VersionDashes]"
echo "*e[0m" NOLINE
echo ""
echo "Welcome to HstWB Installer, an installer which automates"
echo "installation of Amiga OS 3.9, 3.1.4, 3.1, Kickstart roms"
echo "and packages with additional content."
echo ""
echo "As Amiga OS 3.9, 3.1.4, 3.1 and Kickstart roms are still"
echo "under license and sold commercially, these are not"
echo "included and must be provided during installation process."
echo ""
echo "Cloanto Amiga Forever Plus Edition contains both"
echo "Amiga OS 3.1 and Kickstart roms and can be bought from"
echo "https://www.amigaforever.com."
echo ""
echo "Amiga OS 3.9 can be bought from either http://www.vesalia.de"
echo "or http://www.amigakit.com/."
echo ""
ask "Press ENTER to continue"


; amiga os system files message
cls 
echo "*e[32m" NOLINE
echo "Amiga OS system files"
echo "*e[0m*e[1m" NOLINE
echo "---------------------"
echo "*e[0m" NOLINE
echo ""
echo "Amiga OS system files are required for the"
echo "installation process and will load these from"
echo "either Amiga OS 3.9, 3.1.4 or 3.1:"
echo "1. CD0: CD drive with Amiga OS 3.9 cd-rom."
echo "2. AMIGAOSDIR: Directory with Amiga OS 3.1.4 or 3.1"
echo "   Workbench adf file."
echo "3. DF0-DF3: Amiga OS 3.1.4 or 3.1 Workbench disk"
echo "   inserted in any floppy device."
echo ""
echo "Loading Amiga OS system files can be restarted,"
echo "if Amiga OS 3.9, 3.1.4 or 3.1 was not detected."
echo ""
echo "Continue will start loading Amiga OS system files."
echo ""
ask "Press ENTER to continue"


; Set floppydevice empty
Set floppydevice ""


; Load Amiga OS system files
cls 
echo "*e[32m" NOLINE
echo "Load Amiga OS system files"
echo "*e[0m*e[1m" NOLINE
echo "--------------------------"
echo "*e[0m" NOLINE
echo ""
echo "*e[1mLoading Amiga OS system files from Amiga OS 3.9 cd-rom"
echo "in CD0:...*e[0m"

; Set failat to 255 for DiskInDrive to fail silently
failat 255

; Goto find amigs os adf, if CD0: is not present
DiskInDrive >NIL: CD0:
IF WARN
  ; Set failat to 21
  failat 21
  echo "CD0: device is not present! Skip Amiga OS 3.9 cd-rom."
  SKIP amigaosadf
ENDIF

; Goto find amigs os adf, if AmigaOS3.9: is not present
DiskInDrive >NIL: AmigaOS3.9:
IF WARN
  ; Set failat to 21
  failat 21
  echo "AmigaOS3.9: device is not present! Skip Amiga OS 3.9 cd-rom."
  SKIP amigaosadf
ENDIF

; Set failat to 21
failat 21

; Goto find amigs os adf, if AmigaOS3.9:EMERGENCY-BOOT doesn't exist
IF NOT EXISTS AmigaOS3.9:EMERGENCY-BOOT
  echo "Amiga OS 3.9 cd-rom is not valid! Skip Amiga OS 3.9 cd-rom."
  SKIP amigaosadf
ENDIF

; load system files from amiga os 3.9 emergency boot
set systemfilesdir "AmigaOS3.9:EMERGENCY-BOOT/C"
SKIP loadsystemfiles


; amiga os adf
; ------------
LAB amigaosadf

echo ""
echo "*e[1mLoading Amiga OS system files from Amiga OS 3.1.4 or 3.1"
echo "adf file in AMIGAOSDIR:...*e[0m"

; set failat to 255 for DiskInDrive to fail silently
failat 255

; goto amiga os disk, if AMIGAOSDIR: device is not present
DiskInDrive >NIL: AMIGAOSDIR:
IF WARN
  ; set failat to 21
  failat 21
  echo "AMIGAOSDIR: device is not present! Skip Amiga OS 3.1.4"
  echo "and 3.1 Workbench adf file."
  SKIP amigaosdisk
ENDIF

; set failat to 21
failat 21

; find adf files in AMIGAOSDIR:
FSearch >RAM:_adffiles "AMIGAOSDIR:" PAT="#?.adf"

; next adf file
LAB nextadffile

; get next adf file from adf files
set adffile ""
set adffile `sed "1q;d" "RAM:_adffiles"` 

echo "$adffile"

; goto amiga os disk, if no valid amiga os 3.1.4 or 3.1 workbench adf was detected
IF "$adffile" EQ ""
  echo "Amiga OS 3.1.4 or 3.1 Workbench adf file is not present!"
  SKIP amigaosdisk
ENDIF

; goto next adf file, if file size is not 901120 bytes
set filesize `wc -c <"$adffile"`
IF NOT $filesize EQ 901120 VAL
  SKIP BACK nextadffile
ENDIF

; find amiga os 3.1.4 workbench disk volume name in adf file
FSearch >RAM:_amigaos314volume "$adffile" TXT="Workbench3.1.4"
set amigaos314volume `wc -l <RAM:_amigaos314volume`
IF $amigaos314volume GT 0 VAL
  SKIP adflist
ENDIF

; find amiga os 3.1 workbench disk volume name in adf file
FSearch >RAM:_amigaos310volume "$adffile" TXT="Workbench3.1"
set amigaos310volume `wc -l <RAM:_amigaos310volume`
IF $amigaos310volume GT 0 VAL
  SKIP adflist
ENDIF

; goto next adf file, workbench volume name
SKIP BACK nextadffile

; adf list
LAB adflist

; goto next adf file, if xadunfile doesn't return error code 0
xadUnFile >RAM:_adflist "$adffile" DIMG LIST
IF NOT $RC EQ 0
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain which file
grep >NIL: -i "C/Which" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain assign file
grep >NIL: -i "C/Assign" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain datatypes.library file
grep >NIL: -i "Libs/datatypes.library" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain cli file
grep >NIL: -i "System/CLI" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; goto next adf file, if adf doesn't contain shell.info file
grep >NIL: -i "System/Shell.info" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF 

; extract amiga os adf
; --------------------

echo "$adffile"

; create temp amiga os workbench directory, if it doesn't exist
IF NOT EXISTS "HSTWBINSTALLER:Temp/Amiga-OS-Workbench"
  MakePath >NIL: "HSTWBINSTALLER:Temp/Workbench"
ENDIF

; Extract files from amiga os workbench adf
xadUnFile >NIL: "$adffile" "HSTWBINSTALLER:Temp/Amiga-OS-Workbench" DIMG OVERWRITE

; goto load system files
set systemfilesdir "HSTWBINSTALLER:Temp/Amiga-OS-Workbench/C"
SKIP loadsystemfiles 


; amiga os disk
; -------------
LAB amigaosdisk

echo ""
echo "Amiga OS system files could not be loaded from Amiga OS 3.9,"
echo "3.1.4 or 3.1 Workbench adf file. To retry, change cd-rom"
echo "or adf files and restart to retry loading Amiga OS system files."
echo ""
echo "Otherwise Amiga OS system files will now be loaded from"
echo "Amiga OS 3.1 Workbench disk inserted in any floppy device."

LAB insertworkbenchdisk
echo ""
echo "Please insert Workbench 3.1 Workbench disk in any"
echo "floppy device."
echo ""
ask "Press ENTER to continue"
echo ""


; set failat 255 for DiskInDrive to fail silently
failat 255

; Check if disk is present in DF0:
DiskInDrive >NIL: DF0:
IF NOT WARN
  set floppydevice "DF0"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF1:
DiskInDrive >NIL: DF1:
IF NOT WARN
  set floppydevice "DF1"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF2:
DiskInDrive >NIL: DF2:
IF NOT WARN
  set floppydevice "DF2"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF3:, if not go back to insert workbench disk
DiskInDrive >NIL: DF3:
IF NOT WARN
  set floppydevice "DF3"
ELSE
  echo "No disk is inserted in any floppy device!"
  SKIP insertworkbenchdisk back
ENDIF


; Check Workbench 3.1 Workbench disk is present in DF0, if not go back to insert workbench disk
LAB checkworkbenchdisk
failat 21

IF NOT EXISTS $floppydevice:C/Which
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:C/Assign
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:Libs/datatypes.library
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/CLI
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/Shell.info
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT "`$floppydevice:c/which $floppydevice:`" EQ "Workbench3.1:"
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF 

set systemfilesdir "$floppydevice:c"


; Detected floppy device message
echo "Detected Workbench 3.1 disk in floppy device $floppydevice:"
echo ""
ask "Press ENTER to continue"
echo ""
echo "*e[1mLoading Workbench system files from Workbench 3.1 disk...*e[0m"


; Load system files
; -----------------
LAB loadsystemfiles

; load system files resident
resident "$systemfilesdir/Assign" PURE
resident "$systemfilesdir/Copy" PURE
resident "$systemfilesdir/Delete" PURE
resident "$systemfilesdir/Eval" PURE
resident "$systemfilesdir/Execute" PURE
resident "$systemfilesdir/List" PURE
resident "$systemfilesdir/Rename" PURE
resident "$systemfilesdir/MakeDir" PURE
resident "$systemfilesdir/Protect" PURE
resident "$systemfilesdir/Search" PURE 
resident "$systemfilesdir/Wait" PURE 
resident "$systemfilesdir/Which" PURE 
resident "$systemfilesdir/Mount" PURE
resident "$systemfilesdir/Type" PURE
resident "$systemfilesdir/RequestChoice" PURE
resident "$systemfilesdir/Version" PURE

MakeDir RAM:Clipboards RAM:ENV RAM:ENV/Sys
Assign ENV: RAM:Env
Assign T: RAM:
SetEnv TZ MST7

echo "Done"
echo ""
ask "Press ENTER to continue"


; Self install start
; ------------------
LAB selfinstallstart


; Fail, if assign hstwb installer doesn't exist
IF NOT EXISTS S:Assign-HstWB-Installer
  echo "Error: Assign hstwb installer doesn't exist!"
  SKIP fail
ENDIF
execute S:Assign-HstWB-Installer


; Add assigns to installdir
Assign >NIL: S: INSTALLDIR:S ADD
Assign >NIL: C: INSTALLDIR:C ADD
Assign >NIL: Devs: INSTALLDIR:Devs ADD
Assign >NIL: L: INSTALLDIR:L ADD
Assign >NIL: Libs: INSTALLDIR:Libs ADD
Assign >NIL: Prefs: INSTALLDIR:Prefs ADD


; Load commands resident 
Resident >NIL: "INSTALLDIR:C/MakePath" PURE 
Resident >NIL: "INSTALLDIR:C/Reboot" PURE 
Resident >NIL: "INSTALLDIR:C/TotalReset" PURE
Resident >NIL: "INSTALLDIR:C/UAEquit" PURE
Resident >NIL: "INSTALLDIR:C/LhA" PURE
Resident >NIL: "INSTALLDIR:C/UNLZX" PURE
Resident >NIL: "INSTALLDIR:C/UnZip" PURE


; Fail, if HSTWBINSTALLERDIR: device name doesn't exist
Assign >NIL: EXISTS HSTWBINSTALLERDIR:
IF WARN
  echo "Error: HSTWBINSTALLERDIR: device name doesn't exist!"
  SKIP fail
ENDIF


; Create install prefs drawer, if it doesn't exist
IF NOT EXISTS INSTALLDIR:Prefs
  makepath INSTALLDIR:Prefs
ENDIF


; Run patch installation
execute "INSTALLDIR:S/Patch-Installation"


; Run prepare self install
execute "INSTALLDIR:S/Prepare-SelfInstall"


; Run remove self install
execute "INSTALLDIR:S/Remove-SelfInstall"


; Run install start
execute "INSTALLDIR:S/Install-Start"


; Goto self install complete, if floppy device is empty
IF "$floppydevice" EQ ""
  SKIP selfinstallcomplete
ENDIF


; Print eject disk message
cls
echo "*e[32m" NOLINE
echo "Eject disk"
echo "*e[0m*e[1m" NOLINE
echo "----------"
echo "*e[22m" NOLINE
echo ""
echo "A system reboot is required for installation process"
echo "to continue and floppy disk must be ejected."


; Check if disk is present in floppy device, if present go back to eject disk
LAB ejectdisk
DiskInDrive $floppydevice:
IF NOT WARN
  echo ""
  echo "Please eject disk from $floppydevice:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF


; Complete
; --------
LAB selfinstallcomplete

; Remove assigns from installdir
Assign >NIL: S: INSTALLDIR:S REMOVE
Assign >NIL: C: INSTALLDIR:C REMOVE
Assign >NIL: Devs: INSTALLDIR:Devs REMOVE
Assign >NIL: L: INSTALLDIR:L REMOVE
Assign >NIL: Libs: INSTALLDIR:Libs REMOVE
Assign >NIL: Prefs: INSTALLDIR:Prefs REMOVE


; Run Install-Complete
execute "INSTALLDIR:S/Install-Complete"

SKIP end


; Fail
LAB fail
echo ""
echo "Installation failed."
quit


; End
LAB end
