; Startup Sequence for HstWB Self Install
; ---------------------------------------
;
; Date: 2018-03-31
; Author: Henrik Noerfjand Stengaard


FailAt 21

; Load patched scsi.device v43.45, if it exists
IF EXISTS DEVS:scsi.device
  ; Load scsi.device, if current loaded scsi.device is less than v43.45
  Version >NIL: "scsi.device" 43 45
  IF WARN
    LoadModule DEVS:scsi.device
  ENDIF
ENDIF


; Add alias
Alias cls "Echo NOLINE *"*E[0;0H*E[J*" " 

; Set stack
stack 16384

; Add assigns from S:AssignList
AssPlus >NIL:


; Fail, if exec.library is less than v40
Version >NIL: exec.library 40
IF WARN
  echo "*e[1mError: HstWB Installer requires minimum Kickstart 3.1 rom.*e[0m"
  quit
ENDIF


; Welcome message
cls 
echo "*e[32m" NOLINE
echo "HstWB Installer v[$VersionText]"
echo "*e[0m*e[1m" NOLINE
echo "-----------------[$VersionDashes]"
echo "*e[0m" NOLINE
echo ""
echo "Welcome to HstWB Installer, an installer which automates"
echo "installation of Amiga OS 3.9, Workbench 3.1, Kickstart roms"
echo "and packages with additional content."
echo ""
echo "As Amiga OS 3.9, Workbench 3.1 and Kickstart roms are still"
echo "under license and sold commercially, these are not"
echo "included and must be provided during installation process."
echo ""
echo "Cloanto Amiga Forever Plus Edition contains both"
echo "Workbench 3.1 and Kickstart roms and can be bought from"
echo "https://www.amigaforever.com."
echo ""
echo "Amiga OS 3.9 can be bought from either http://www.vesalia.de"
echo "or http://www.amigakit.com/."
echo ""
ask "Press ENTER to continue"


; Workbench message
cls 
echo "*e[32m" NOLINE
echo "Workbench system files"
echo "*e[0m*e[1m" NOLINE
echo "----------------------"
echo "*e[0m" NOLINE
echo ""
echo "Workbench system files are required for the"
echo "installation process and will load these from"
echo "either Amiga OS 3.9 CD, Workbench 3.1 adf or disk:"
echo "1. CD0: CD drive with Amiga OS 3.9 cd-rom."
echo "2. WORKBENCHDIR: Directory with Workbench 3.1 adf file."
echo "3. FD0:, FD1:, FD2:, FD3: Workbench 3.1 disk inserted in"
echo "   any floppy device."
echo ""
echo "Loading Workbench system files can be restarted,"
echo "if Amiga OS 3.9 cd-rom or Workbench 3.1 adf file was not"
echo "detected."
echo ""
echo "Continue will start loading Workbench system files."
echo ""
ask "Press ENTER to continue"


; Set floppydevice empty
Set floppydevice ""


; Load Workbench system files
cls 
echo "*e[32m" NOLINE
echo "Load Workbench system files"
echo "*e[0m*e[1m" NOLINE
echo "---------------------------"
echo "*e[0m" NOLINE
echo ""
echo "*e[1mLoading Workbench system files from Amiga OS 3.9 cd-rom"
echo "in CD0:...*e[0m"

; Set failat to 255 for DiskInDrive to fail silently
failat 255

; Goto find workbench adf, if CD0: is not present
DiskInDrive >NIL: CD0:
IF WARN
  ; Set failat to 21
  failat 21
  echo "CD0: device is not present! Skip Amiga OS 3.9 cd-rom."
  SKIP findworkbenchadf
ENDIF

; Goto find workbench adf, if AmigaOS3.9: is not present
DiskInDrive >NIL: AmigaOS3.9:
IF WARN
  ; Set failat to 21
  failat 21
  echo "AmigaOS3.9: device is not present! Skip Amiga OS 3.9 cd-rom."
  SKIP findworkbenchadf
ENDIF

; Set failat to 21
failat 21

; Goto find workbench adf, if AmigaOS3.9:EMERGENCY-BOOT doesn't exist
IF NOT EXISTS AmigaOS3.9:EMERGENCY-BOOT
  echo "Amiga OS 3.9 cd-rom is not valid! Skip Amiga OS 3.9 cd-rom."
  SKIP findworkbenchadf
ENDIF

; Goto install system files
set systemfilesdir "AmigaOS3.9:EMERGENCY-BOOT"
SKIP loadsystemfiles


; Find workbench adf
; ------------------
LAB findworkbenchadf

echo ""
echo "*e[1mLoading Workbench system files from Workbench 3.1 adf file"
echo "in WORKBENCHDIR:...*e[0m"

; Goto detect workbench disk, if WORKBENCHDIR: is not mapped
DiskInDrive >NIL: WORKBENCHDIR:
IF WARN
  ; Set failat to 21
  failat 21
  echo "WORKBENCHDIR: device is not present! Skip Workbench 3.1"
  echo "adf file."
  SKIP detectworkbenchdisk
ENDIF


; Set failat to 21
failat 21


; Find adf files in WORKBENCHDIR:
FSearch >RAM:_adffiles "WORKBENCHDIR:" PAT="#?.adf"

; Get next adf file
LAB nextadffile

; Get next adf file from adf files
set adffile ""
set adffile `sed "1q;d" "RAM:_adffiles"`

; Delete adf file from adf files
sed "1d" "RAM:_adffiles" >"RAM:_adffiles2"
Copy >NIL: "RAM:_adffiles2" "RAM:_adffiles"

; Goto workbench disk, if no valid workbench adf was detected
IF "$adffile" EQ ""
  echo "Workbench 3.1 adf file not present! Skip Workbench 3.1"
  echo "adf file."
  SKIP detectworkbenchdisk
ENDIF

; Goto next adf file, if file size is not 901120 bytes
set filesize `wc -c <"$adffile"`
IF NOT $filesize EQ 901120 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf files doesn't contain text "Workbench 3.1"
FSearch >RAM:_workbenchadffiles "$adffile" TXT="Workbench3.1"
set workbenchadffiles `wc -l <RAM:_workbenchadffiles`
IF $workbenchadffiles EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if xadunfile doesn't return error code 0
xadUnFile >RAM:_adflist "$adffile" DIMG LIST
IF NOT $RC EQ 0
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain which file
grep >NIL: -i "C/Which" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain assign file
grep >NIL: -i "C/Assign" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain datatypes.library file
grep >NIL: -i "Libs/datatypes.library" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain cli file
grep >NIL: -i "System/CLI" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF

; Goto next adf file, if adf doesn't contain shell.info file
grep >NIL: -i "System/Shell.info" <RAM:_adflist
IF NOT $RC EQ 0 VAL
  SKIP BACK nextadffile
ENDIF


; Extract workbench adf
; ---------------------
LAB extractworkbenchadf

echo "$adffile"

; Create temp workbench directory, if it doesn't exist
IF NOT EXISTS "SYS:Temp/Workbench"
  MakePath >NIL: "SYS:Temp/Workbench"
ENDIF

; Extract files from workbench 3.1 adf
xadUnFile >NIL: "$adffile" "SYS:Temp/Workbench" DIMG OVERWRITE

; Goto install system files
set systemfilesdir "SYS:Temp/Workbench"
SKIP loadsystemfiles


; Detect workbench disk
; ----------------------
LAB detectworkbenchdisk

echo ""
echo "Workbench system files could not be loaded from Amiga OS 3.9"
echo "cd-rom or Workbench 3.1 adf file. Restart with changed cd-rom"
echo "or adf files to retry Load Workbench system files."
echo ""
echo "Otherwise Workbench system files will now be loaded from"
echo "Workbench 3.1 disk inserted in any floppy device."

LAB insertworkbenchdisk
echo ""
echo "Please insert Workbench 3.1 Workbench disk in any"
echo "floppy device."
echo ""
ask "Press ENTER to continue"
echo ""


; Using fail at 255 for DiskInDrive to fail silently
failat 255

; Check if disk is present in DF0:
DiskInDrive >NIL: DF0:
IF NOT WARN
  set floppydevice "DF0"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF1:
DiskInDrive >NIL: DF1:
IF NOT WARN
  set floppydevice "DF1"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF2:
DiskInDrive >NIL: DF2:
IF NOT WARN
  set floppydevice "DF2"
  SKIP checkworkbenchdisk
ENDIF

; Check if disk is present in DF3:, if not go back to insert workbench disk
DiskInDrive >NIL: DF3:
IF NOT WARN
  set floppydevice "DF3"
ELSE
  echo "No disk is inserted in any floppy device!"
  SKIP insertworkbenchdisk back
ENDIF


; Check Workbench 3.1 Workbench disk is present in DF0, if not go back to insert workbench disk
LAB checkworkbenchdisk
failat 21

IF NOT EXISTS $floppydevice:C/Which
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:C/Assign
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF
IF NOT EXISTS $floppydevice:Libs/datatypes.library
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/CLI
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT EXISTS $floppydevice:System/Shell.info
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP BACK insertworkbenchdisk
ENDIF
IF NOT "`$floppydevice:c/which $floppydevice:`" EQ "Workbench3.1:"
  echo "Workbench disk in floppy device $floppydevice: is not valid!"
  SKIP insertworkbenchdisk back
ENDIF 


; Detected floppy device message
echo "Detected Workbench 3.1 disk in floppy device $floppydevice:"
echo ""
ask "Press ENTER to continue"
echo ""
echo "*e[1mLoading Workbench system files from Workbench 3.1 disk...*e[0m"


; Load system files
; -----------------
LAB loadsystemfiles

; Load basic commands resident
IF "$floppydevice" EQ ""
  resident "$systemfilesdir/C/Assign" PURE
  resident "$systemfilesdir/C/Copy" PURE
  resident "$systemfilesdir/C/Delete" PURE
  resident "$systemfilesdir/C/Eval" PURE
  resident "$systemfilesdir/C/Execute" PURE
  resident "$systemfilesdir/C/Rename" PURE
  resident "$systemfilesdir/C/MakeDir" PURE
  resident "$systemfilesdir/C/Protect" PURE
  resident "$systemfilesdir/C/Search" PURE 
  resident "$systemfilesdir/C/Wait" PURE 
  resident "$systemfilesdir/C/Which" PURE 
  resident "$systemfilesdir/C/Mount" PURE
  resident "$systemfilesdir/C/Type" PURE
  resident "$systemfilesdir/C/RequestChoice" PURE
  resident "$systemfilesdir/C/Version" PURE
ELSE
  "$floppydevice:C/AddBuffers" >NIL: $floppydevice: 200
  resident "$floppydevice:C/Assign" PURE
  resident "$floppydevice:C/Copy" PURE
  resident "$floppydevice:C/Delete" PURE
  resident "$floppydevice:C/Eval" PURE
  resident "$floppydevice:C/Execute" PURE
  resident "$floppydevice:C/Rename" PURE
  resident "$floppydevice:C/MakeDir" PURE
  resident "$floppydevice:C/Protect" PURE
  resident "$floppydevice:C/Search" PURE 
  resident "$floppydevice:C/Wait" PURE 
  resident "$floppydevice:C/Which" PURE 
  resident "$floppydevice:C/Mount" PURE
  resident "$floppydevice:C/Type" PURE
  resident "$floppydevice:C/RequestChoice" PURE
  resident "$floppydevice:C/Version" PURE
ENDIF

MakeDir RAM:Clipboards RAM:ENV RAM:ENV/Sys
Assign ENV: RAM:Env
Assign T: RAM:
SetEnv TZ MST7

echo "Done"
echo ""
ask "Press ENTER to continue"


; Self install start
; ------------------
LAB selfinstallstart


; Fail, if assign hstwb installer doesn't exist
IF NOT EXISTS S:Assign-HstWB-Installer
  echo "Error: Assign hstwb installer doesn't exist!"
  SKIP fail
ENDIF
execute S:Assign-HstWB-Installer


; Add assigns to installdir
Assign >NIL: S: INSTALLDIR:S ADD
Assign >NIL: C: INSTALLDIR:C ADD
Assign >NIL: Devs: INSTALLDIR:Devs ADD
Assign >NIL: L: INSTALLDIR:L ADD
Assign >NIL: Libs: INSTALLDIR:Libs ADD
Assign >NIL: Prefs: INSTALLDIR:Prefs ADD


; Fail, if HSTWBINSTALLERDIR: device name doesn't exist
Assign >NIL: EXISTS HSTWBINSTALLERDIR:
IF WARN
  echo "Error: HSTWBINSTALLERDIR: device name doesn't exist!"
  SKIP fail
ENDIF


; Load commands resident 
resident INSTALLDIR:C/MakePath PURE 
resident INSTALLDIR:C/Reboot PURE 
resident INSTALLDIR:C/TotalReset PURE
resident INSTALLDIR:C/UAEquit PURE
resident INSTALLDIR:C/UnZip PURE 


; Create install prefs drawer, if it doesn't exist
IF NOT EXISTS INSTALLDIR:Prefs
  makepath INSTALLDIR:Prefs
ENDIF


; Run patch installation
execute "INSTALLDIR:S/Patch-Installation"


; Run prepare self install
execute "INSTALLDIR:S/Prepare-SelfInstall"


; Run remove self install
execute "INSTALLDIR:S/Remove-SelfInstall"


; Run install start
execute "INSTALLDIR:S/Install-Start"


; Goto self install complete, if floppy device is empty
IF "$floppydevice" EQ ""
  SKIP selfinstallcomplete
ENDIF


; Print eject disk message
cls
echo "*e[32m" NOLINE
echo "Eject disk"
echo "*e[0m*e[1m" NOLINE
echo "----------"
echo "*e[22m" NOLINE
echo ""
echo "A system reboot is required for installation process"
echo "to continue and floppy disk must be ejected."


; Check if disk is present in floppy device, if present go back to eject disk
LAB ejectdisk
DiskInDrive $floppydevice:
IF NOT WARN
  echo ""
  echo "Please eject disk from $floppydevice:"
  echo ""
  ask "Press ENTER to continue"
  SKIP ejectdisk back
ENDIF


; Complete
; --------
LAB selfinstallcomplete

; Remove assigns from installdir
Assign >NIL: S: INSTALLDIR:S REMOVE
Assign >NIL: C: INSTALLDIR:C REMOVE
Assign >NIL: Devs: INSTALLDIR:Devs REMOVE
Assign >NIL: L: INSTALLDIR:L REMOVE
Assign >NIL: Libs: INSTALLDIR:Libs REMOVE
Assign >NIL: Prefs: INSTALLDIR:Prefs REMOVE


; Run Install-Complete
execute "INSTALLDIR:S/Install-Complete"

SKIP end


; Fail
LAB fail
echo ""
echo "Installation failed."
quit


; End
LAB end